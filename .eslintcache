[{"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\index.tsx":"1","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\reportWebVitals.ts":"2","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\App.tsx":"3","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.page.tsx":"4","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.page.tsx":"5","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.page.tsx":"6","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.page.tsx":"7","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.styled.tsx":"8","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.service.tsx":"9","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.styled.tsx":"10","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.styled.tsx":"11","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.service.tsx":"12","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-registo.component.tsx":"13","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMe.hook.tsx":"14","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchContas.hook.tsx":"15","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMovimentos.hook.tsx":"16","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\components\\modal-registo.component.tsx":"17","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\fetchers\\useFetchPlaneamentos.hook.tsx":"18","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchCategorias.hook.tsx":"19","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSubCategorias.hook.tsx":"20","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.service.tsx":"21","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.service.tsx":"22","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchTotaisPorMes.hook.tsx":"23","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\helpers\\authReducer.reducer.tsx":"24","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-contas.component.tsx":"25","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-categorias.component.tsx":"26","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.page.tsx":"27","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.styled.tsx":"28","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.service.tsx":"29"},{"size":500,"mtime":1607102408355,"results":"30","hashOfConfig":"31"},{"size":425,"mtime":1607102408415,"results":"32","hashOfConfig":"31"},{"size":1412,"mtime":1613418521158,"results":"33","hashOfConfig":"31"},{"size":5296,"mtime":1613486405569,"results":"34","hashOfConfig":"31"},{"size":15808,"mtime":1613418698189,"results":"35","hashOfConfig":"31"},{"size":6391,"mtime":1613484373991,"results":"36","hashOfConfig":"31"},{"size":4647,"mtime":1613515958354,"results":"37","hashOfConfig":"31"},{"size":799,"mtime":1608207322227,"results":"38","hashOfConfig":"31"},{"size":556,"mtime":1611511232830,"results":"39","hashOfConfig":"31"},{"size":1316,"mtime":1613477069244,"results":"40","hashOfConfig":"31"},{"size":870,"mtime":1608306562906,"results":"41","hashOfConfig":"31"},{"size":724,"mtime":1613210984217,"results":"42","hashOfConfig":"31"},{"size":9510,"mtime":1613323753692,"results":"43","hashOfConfig":"31"},{"size":1139,"mtime":1611511526421,"results":"44","hashOfConfig":"31"},{"size":997,"mtime":1613299063467,"results":"45","hashOfConfig":"31"},{"size":1365,"mtime":1613254694389,"results":"46","hashOfConfig":"31"},{"size":6331,"mtime":1611499699286,"results":"47","hashOfConfig":"31"},{"size":988,"mtime":1613412579387,"results":"48","hashOfConfig":"31"},{"size":946,"mtime":1613323681467,"results":"49","hashOfConfig":"31"},{"size":1049,"mtime":1611501086662,"results":"50","hashOfConfig":"31"},{"size":4099,"mtime":1613319913624,"results":"51","hashOfConfig":"31"},{"size":1238,"mtime":1613411100476,"results":"52","hashOfConfig":"31"},{"size":934,"mtime":1613162626379,"results":"53","hashOfConfig":"31"},{"size":481,"mtime":1613215985558,"results":"54","hashOfConfig":"31"},{"size":5618,"mtime":1613301674384,"results":"55","hashOfConfig":"31"},{"size":4756,"mtime":1613323701816,"results":"56","hashOfConfig":"31"},{"size":10963,"mtime":1613487553823,"results":"57","hashOfConfig":"31"},{"size":995,"mtime":1613477929480,"results":"58","hashOfConfig":"31"},{"size":1014,"mtime":1613484755141,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"qkq85h",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"62"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"62"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"62"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"62"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"62"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\index.tsx",[],["132","133"],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\reportWebVitals.ts",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\App.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.page.tsx",["134"],"import * as React from \"react\";\r\nimport * as S from \"./login.styled\";\r\nimport { ILoginData, SERVICE } from \"./login.service\";\r\n\r\nimport * as BS from \"react-bootstrap\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport * as yup from \"yup\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport {\r\n  asyncLocalStorage,\r\n  isLoggedIn,\r\n} from \"../../helpers/authReducer.reducer\";\r\n\r\nconst schema = yup.object({\r\n  username: yup.string().required().max(35).min(1),\r\n  password: yup.string().required().min(5),\r\n});\r\n\r\nconst initialValues: ILoginData = {\r\n  username: \"\",\r\n  password: \"\",\r\n};\r\ninterface ILoginPageProps {}\r\n\r\ninterface ILoginError {\r\n  hasError: boolean;\r\n  message: string;\r\n}\r\n\r\nexport const LoginPage: React.FC<ILoginPageProps> = (props) => {\r\n  // Hook - função responsável por fazer os devidos redirects na página.\r\n  const history = useHistory();\r\n  const [errorOnLogin, setErrorOnLogin] = React.useState<ILoginError>({\r\n    hasError: false,\r\n    message: \"\",\r\n  });\r\n\r\n  React.useEffect(() => {\r\n    if (isLoggedIn()) {\r\n      history.push(\"dashboard\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <S.PageContainer>\r\n      <BS.Container fluid className=\"h-100\">\r\n        <BS.Row className=\"h-100\">\r\n          <BS.Col lg={3} className=\"flex-center-center\">\r\n            <S.FormContainer className=\"flex-center-center\">\r\n              <Formik\r\n                validationSchema={schema}\r\n                onSubmit={(values: ILoginData) => {\r\n                  SERVICE.methods\r\n                    .doLogin(values)\r\n                    .then((result) => {\r\n                      asyncLocalStorage\r\n                        .setItem(\"token\", JSON.stringify(result.data))\r\n                        .then(() => {\r\n                          setErrorOnLogin({\r\n                            hasError: false,\r\n                            message: \"\",\r\n                          });\r\n\r\n                          history.push(\"/dashboard\");\r\n                        });\r\n                    })\r\n                    .catch(() => {\r\n                      setErrorOnLogin({\r\n                        hasError: true,\r\n                        message: \"Erro ao fazer login\",\r\n                      });\r\n                    });\r\n                }}\r\n                initialValues={initialValues}\r\n              >\r\n                {({\r\n                  handleSubmit,\r\n                  handleChange,\r\n                  handleBlur,\r\n                  values,\r\n                  touched,\r\n                  isValid,\r\n                  errors,\r\n                }) => (\r\n                  <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n                    <BS.Form.Group>\r\n                      <BS.Form.Control\r\n                        className=\"italico\"\r\n                        type=\"text\"\r\n                        name=\"username\"\r\n                        placeholder=\"username\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.username}\r\n                        isValid={touched.username && !errors.username}\r\n                      />\r\n                    </BS.Form.Group>\r\n\r\n                    <BS.Form.Group>\r\n                      <BS.Form.Control\r\n                        className=\"italico\"\r\n                        type=\"password\"\r\n                        name=\"password\"\r\n                        placeholder=\"password\"\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                        isValid={touched.password && !errors.password}\r\n                      />\r\n                      <BS.Row className=\"mt-2\">\r\n                        <BS.Col>\r\n                          {errorOnLogin.hasError && (\r\n                            <BS.Alert variant=\"danger\">\r\n                              {errorOnLogin.message}\r\n                            </BS.Alert>\r\n                          )}\r\n                        </BS.Col>\r\n                      </BS.Row>\r\n                    </BS.Form.Group>\r\n\r\n                    <BS.Row>\r\n                      <BS.Col lg={6}>\r\n                        <BS.Button\r\n                          variant=\"link\"\r\n                          className=\"w-100 botao-registo\"\r\n                          onClick={() => {\r\n                            history.push(\"/register\");\r\n                          }}\r\n                        >\r\n                          Novo registo\r\n                        </BS.Button>\r\n                      </BS.Col>\r\n                      <BS.Col lg={6}>\r\n                        <BS.Button\r\n                          variant=\"secondary\"\r\n                          type=\"submit\"\r\n                          className=\"w-100 botao-entrar\"\r\n                        >\r\n                          entrar\r\n                        </BS.Button>\r\n                      </BS.Col>\r\n                    </BS.Row>\r\n                  </BS.Form>\r\n                )}\r\n              </Formik>\r\n            </S.FormContainer>\r\n          </BS.Col>\r\n          <BS.Col lg={9} className=\"flex-center-center\">\r\n            <S.WelcomeTitle>Bem vindo à Save iT</S.WelcomeTitle>\r\n          </BS.Col>\r\n        </BS.Row>\r\n      </BS.Container>\r\n    </S.PageContainer>\r\n  );\r\n};\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.page.tsx",["135","136","137","138","139","140","141","142"],"import * as React from \"react\";\r\nimport * as S from \"./dashboard.styled\";\r\n\r\nimport * as BS from \"react-bootstrap\";\r\nimport * as Icon from \"react-bootstrap-icons\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nimport ModalRegisto, {\r\n  ETipoRegisto,\r\n} from \"./components/modal-registo.component\";\r\n\r\nimport ModalConta from \"./components/modal-contas.component\";\r\n\r\nimport ModalCategoria from \"./components/modal-categorias.component\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport useFetchMovimentos from \"./fetchers/useFetchMovimentos.hook\";\r\nimport useFetchContas from \"./fetchers/useFetchContas.hook\";\r\nimport useFetchMe from \"./fetchers/useFetchMe.hook\";\r\nimport useFetchTotaisPorMes, {\r\n  ETipoTotal,\r\n} from \"./fetchers/useFetchTotaisPorMes.hook\";\r\nimport { isLoggedIn } from \"../../helpers/authReducer.reducer\";\r\n\r\ninterface IDashboarPageProps {}\r\n\r\nexport const DashboarPage: React.FC<IDashboarPageProps> = (props) => {\r\n  const history = useHistory();\r\n\r\n  // estado para controlar a paginação da tabela\r\n  const [movimentosPage, setMovimentosPage] = React.useState(1);\r\n\r\n  // fetcher para obeter os movimentos receitas e despesas, bem como o total de movimentos em BD (movimentosSize) para poder controlar a paginação\r\n  const [\r\n    movimentos,\r\n    movimentosSize,\r\n    errorMovimentos,\r\n    isLoadingMovimentos,\r\n  ] = useFetchMovimentos(movimentosPage);\r\n\r\n  // função que vai criar os indicadores de paginação da tabela\r\n  const renderPaginationItems = () => {\r\n    const items = [\r\n      <BS.Pagination.First\r\n        onClick={() => {\r\n          setMovimentosPage(1);\r\n        }}\r\n      />,\r\n      <BS.Pagination.Prev\r\n        onClick={() => {\r\n          setMovimentosPage(movimentosPage - 1);\r\n        }}\r\n      />,\r\n    ];\r\n\r\n    // vamos assumir que cada página tem 10 linhas, o Math.ceil arredonda para cima\r\n    for (let index = 1; index < Math.ceil(movimentosSize / 10); index++) {\r\n      items.push(\r\n        <BS.PageItem\r\n          active={index === movimentosPage}\r\n          onClick={() => {\r\n            setMovimentosPage(index);\r\n          }}\r\n        >\r\n          {index}\r\n        </BS.PageItem>\r\n      );\r\n    }\r\n\r\n    items.push(\r\n      <BS.Pagination.Next\r\n        onClick={() => {\r\n          setMovimentosPage(movimentosPage + 1);\r\n        }}\r\n      />,\r\n      <BS.Pagination.Last\r\n        onClick={() => {\r\n          setMovimentosPage(Math.ceil(movimentosSize / 5));\r\n        }}\r\n      />\r\n    );\r\n\r\n    return items;\r\n  };\r\n\r\n  //fetcher para obter a lista de contas, recebe um booleano como argumento que indica se é para injetar\r\n  //uma conta ficticia para trabalhar com as dropdownds, pq este fetcher tb é usado noutros sitios\r\n  const [contas, errorContas, isLoadingContas] = useFetchContas(false);\r\n\r\n  // este fetcher está a devolver valores random para os totais por mês de credito\r\n  const [\r\n    totaisMesCredito,\r\n    errorTotaisMesCredito,\r\n    isLoadingTotaisMesCredito,\r\n  ] = useFetchTotaisPorMes(ETipoTotal.CREDITO);\r\n\r\n  // este fetcher está a devolver valores random para os totais por mês de debito\r\n  const [\r\n    totaisMesDebito,\r\n    errorTotaisMesDebito,\r\n    isLoadingTotaisMesDebito,\r\n  ] = useFetchTotaisPorMes(ETipoTotal.DEBITO);\r\n\r\n  // Fetcher para ir buscar a info referente ao user logado\r\n  const [me] = useFetchMe();\r\n\r\n  // este effect serve para verificar se o user está logado (usa uma função que verifica se existe um token em localstorage)\r\n  // caso o user n esteja logado é mandado para a página de login\r\n  // este fetcher executa uma vez quando a página é renderizada\r\n  React.useEffect(() => {\r\n    if (!isLoggedIn()) {\r\n      history.push(\"login\");\r\n    }\r\n  }, []);\r\n\r\n  // dados dummy para os donut charts\r\n  const dataDespesa = {\r\n    labels: [\"Supermercado\", \"Cinema\", \"Ginásio\"],\r\n    datasets: [\r\n      {\r\n        data: [300, 50, 100],\r\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const dataReceita = {\r\n    labels: [\"EMprego\", \"Bolsa\", \"Outros\"],\r\n    datasets: [\r\n      {\r\n        data: [900, 130, 100],\r\n        backgroundColor: [\"#3ba549\", \"#3642EB\", \"#F0CE06\"],\r\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Este state controla se a modal de inserir receita está aberta ou fechada\r\n  const [showModalReceita, setShowModalReceita] = React.useState<boolean>(\r\n    false\r\n  );\r\n\r\n  // Este state controla se a modal de inserir despesa está aberta ou fechada\r\n  const [showModalDespesa, setShowModalDespesa] = React.useState<boolean>(\r\n    false\r\n  );\r\n\r\n  // Este state controla se a modal de inserir conta está aberta ou fechada\r\n  const [showModalConta, setShowModalConta] = React.useState<boolean>(false);\r\n\r\n  // Este state controla se a modal de inserir conta está aberta ou fechada\r\n  const [showModalCategoria, setShowModalCategoria] = React.useState<boolean>(\r\n    false\r\n  );\r\n\r\n  // funcção que renderiza a modal de receita\r\n  const renderModalReceita = () => {\r\n    return (\r\n      <ModalRegisto\r\n        tipo={ETipoRegisto.receita}\r\n        show={showModalReceita}\r\n        onHide={setShowModalReceita}\r\n      ></ModalRegisto>\r\n    );\r\n  };\r\n\r\n  // funcção que renderiza a modal de despesa\r\n  const renderModalDespesa = () => {\r\n    return (\r\n      <ModalRegisto\r\n        tipo={ETipoRegisto.despesa}\r\n        show={showModalDespesa}\r\n        onHide={setShowModalDespesa}\r\n      ></ModalRegisto>\r\n    );\r\n  };\r\n\r\n  // funcção que renderiza a modal de contas\r\n  const renderModalConta = () => {\r\n    return (\r\n      <ModalConta show={showModalConta} onHide={setShowModalConta}></ModalConta>\r\n    );\r\n  };\r\n\r\n  // funcção que renderiza a modal de categorias\r\n  const renderModalCategoria = () => {\r\n    return (\r\n      <ModalCategoria\r\n        show={showModalCategoria}\r\n        onHide={setShowModalCategoria}\r\n      ></ModalCategoria>\r\n    );\r\n  };\r\n\r\n  // página de dashboard\r\n  return (\r\n    <S.PageContainer>\r\n      <BS.Container fluid className=\"h-100\">\r\n        <BS.Row className=\"h-100\">\r\n          <BS.Col lg={2} className=\"sidebar\">\r\n            <BS.Container>\r\n              <BS.Row\r\n                className=\"branco\"\r\n                onClick={() => {\r\n                  history.push(\"/dashboard\");\r\n                }}\r\n              >\r\n                <h1 className=\"w-100\">Save iT</h1>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <h5 className=\"branco\">{`Bem vindo(a) ${me.username}`}</h5>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      history.push(\"/budget\");\r\n                    }}\r\n                  >\r\n                    Planeamentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Investimentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Alertas\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      history.push(\"/definicoes\");\r\n                    }}\r\n                  >\r\n                    Definições\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      // quando o user clica no logout o localstorage é limpo, i.e. o token\r\n                      localStorage.clear();\r\n                      // user é enviado para a página de login\r\n                      history.push(\"/login\");\r\n                    }}\r\n                  >\r\n                    Sair\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Container>\r\n          </BS.Col>\r\n          <BS.Col lg={10}>\r\n            <BS.Container fluid className=\"mt-2\">\r\n              <BS.Row>\r\n                <BS.Col lg={3}>\r\n                  <BS.Card className={\"saldo-total\"}>\r\n                    <BS.Card.Body>\r\n                      <BS.Card.Title>Saldo Total</BS.Card.Title>\r\n                      <BS.Card.Text>\r\n                        {isLoadingContas\r\n                          ? \"loading...\"\r\n                          : `${\r\n                              contas.length &&\r\n                              contas\r\n                                .map((conta) =>\r\n                                  Number.parseFloat(conta.saldo || \"0\")\r\n                                )\r\n                                .reduce((acc, nextval) => acc + nextval)\r\n                            } €`}\r\n                      </BS.Card.Text>\r\n                    </BS.Card.Body>\r\n                  </BS.Card>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-conta\"} indicators={false}>\r\n                    {contas.map((conta) => {\r\n                      return (\r\n                        <BS.Carousel.Item>\r\n                          <h5>Saldo Conta</h5>\r\n                          <h5>{`${conta.saldo} €`}</h5>\r\n                          <p>{conta.nome}</p>\r\n                        </BS.Carousel.Item>\r\n                      );\r\n                    })}\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-receita\"} indicators={false}>\r\n                    {totaisMesCredito.map((tmc) => {\r\n                      return (\r\n                        <BS.Carousel.Item>\r\n                          <h5>Receita Mensal</h5>\r\n                          <h5>{tmc.total}€</h5>\r\n                          <p>{tmc.anoMes}</p>\r\n                        </BS.Carousel.Item>\r\n                      );\r\n                    })}\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-despesa\"} indicators={false}>\r\n                    {totaisMesDebito.map((tmc) => {\r\n                      return (\r\n                        <BS.Carousel.Item>\r\n                          <h5>Despesa Mensal</h5>\r\n                          <h5>{tmc.total}€</h5>\r\n                          <p>{tmc.anoMes}</p>\r\n                        </BS.Carousel.Item>\r\n                      );\r\n                    })}\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className={\"mt-2\"}>\r\n                <BS.Col lg=\"8\">\r\n                  <BS.Container\r\n                    className=\"mt-2 overflow-auto\"\r\n                    style={{ maxHeight: \"400px\" }}\r\n                  >\r\n                    <BS.Table responsive className=\"sm-table\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Data</th>\r\n                          <th>Conta</th>\r\n                          <th>Categoria</th>\r\n                          <th>Subcategoria</th>\r\n                          <th>Descrição</th>\r\n                          <th>Valor</th>\r\n                          <th></th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {movimentos.map((mov) => {\r\n                          return (\r\n                            <tr\r\n                              className={`registo-${mov.tipo} p-0`}\r\n                              key={`${mov.data}-${mov.descricao}`}\r\n                            >\r\n                              <td>{mov.data}</td>\r\n                              <td>{mov.id_conta.nome}</td>\r\n                              <td>{mov.categoria.nome}</td>\r\n                              <td>{mov.sub_categoria.nome}</td>\r\n                              <td>{mov.descricao}</td>\r\n                              <td>{`${mov.montante} €`}</td>\r\n                              <td>\r\n                                {mov.tipo === \"receita\" ? (\r\n                                  <Icon.GraphUp />\r\n                                ) : (\r\n                                  <Icon.GraphDown />\r\n                                )}\r\n                              </td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </BS.Table>\r\n                  </BS.Container>\r\n                  <BS.Row className=\"mt-2\">\r\n                    <BS.Col lg=\"12\" md=\"12\">\r\n                      <BS.Pagination className=\"justify-content-center\">\r\n                        {renderPaginationItems()}\r\n                      </BS.Pagination>\r\n                    </BS.Col>\r\n                  </BS.Row>\r\n                </BS.Col>\r\n                <BS.Col lg=\"4\">\r\n                  <BS.Row>\r\n                    <BS.Col lg=\"12\">\r\n                      <BS.Card>\r\n                        <BS.Card.Body>\r\n                          <BS.Card.Title>Receitas novembro 2020</BS.Card.Title>\r\n                          <BS.Card.Text>\r\n                            <Doughnut data={dataReceita} />\r\n                          </BS.Card.Text>\r\n                        </BS.Card.Body>\r\n                      </BS.Card>\r\n                    </BS.Col>\r\n                  </BS.Row>\r\n                  <BS.Row className={\"mt-2\"}>\r\n                    <BS.Col lg={12}>\r\n                      <BS.Card>\r\n                        <BS.Card.Body>\r\n                          <BS.Card.Title>Despesas novembro 2020</BS.Card.Title>\r\n                          <BS.Card.Text>\r\n                            <Doughnut data={dataDespesa} />\r\n                          </BS.Card.Text>\r\n                        </BS.Card.Body>\r\n                      </BS.Card>\r\n                    </BS.Col>\r\n                  </BS.Row>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Container>\r\n          </BS.Col>\r\n        </BS.Row>\r\n      </BS.Container>\r\n      <BS.DropdownButton\r\n        id=\"dropdown-basic-button\"\r\n        title=\"+\"\r\n        drop={\"up\"}\r\n        className=\"add-button\"\r\n      >\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShowModalReceita(true);\r\n          }}\r\n        >\r\n          Receita\r\n        </BS.Dropdown.Item>\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShowModalDespesa(true);\r\n          }}\r\n        >\r\n          Despesa\r\n        </BS.Dropdown.Item>\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShowModalConta(true);\r\n          }}\r\n        >\r\n          Conta\r\n        </BS.Dropdown.Item>\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShowModalCategoria(true);\r\n          }}\r\n        >\r\n          Categoria\r\n        </BS.Dropdown.Item>\r\n      </BS.DropdownButton>\r\n      {renderModalReceita()}\r\n      {renderModalDespesa()}\r\n      {renderModalConta()}\r\n      {renderModalCategoria()}\r\n    </S.PageContainer>\r\n  );\r\n};\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.page.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.page.tsx",["143","144","145"],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.service.tsx",["146"],"import axios from \"axios\";\r\n\r\nexport interface ILoginData {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nconst authToken = JSON.parse(localStorage.getItem(\"token\") || \"{}\");\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\",\r\n  Authorization: `Token ${authToken.auth_token} `,\r\n};\r\n\r\nexport const SERVICE = {\r\n  routes: {\r\n    login: \"api/v1/token/login/\",\r\n    me: \"api/v1/users/me/\",\r\n  },\r\n  methods: {\r\n    doLogin: (data: ILoginData) => {\r\n      return axios.post(`http://127.0.0.1:8000/${SERVICE.routes.login}`, data);\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-registo.component.tsx",["147","148","149","150"],"import * as React from \"react\";\r\nimport * as BS from \"react-bootstrap\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { IMovimentoData, IConta, SERVICE } from \"../dashboard.service\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport useFetchCategorias, {\r\n  ICategoria,\r\n} from \"../fetchers/useFetchCategorias.hook\";\r\n\r\nimport useFetchSubCategoria, {\r\n  ISubCategoria,\r\n} from \"../fetchers/useFetchSubCategorias.hook\";\r\n\r\nimport useFetchContas from \"../fetchers/useFetchContas.hook\";\r\n\r\nexport enum ETipoRegisto {\r\n  receita = \"receita\",\r\n  despesa = \"despesa\",\r\n}\r\n\r\ninterface IModalRegistoProps {\r\n  tipo: ETipoRegisto;\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  descricao: yup.string().trim().required().min(1).max(30),\r\n  categoria: yup.number().required().notOneOf([-1]),\r\n  sub_categoria: yup.number().notOneOf([-1]),\r\n  montante: yup.number().required().min(0.1).max(10000),\r\n  data: yup.string().required(),\r\n  // recorrencia: yup.string().trim().oneOf([\"Mensal\", \"Anual\"]),\r\n  id_conta: yup.number().required().notOneOf([-1]),\r\n  tipo: yup.string().trim(),\r\n});\r\n\r\nexport const ModalRegisto = (props: IModalRegistoProps) => {\r\n  const initialValues: IMovimentoData = {\r\n    descricao: \"\",\r\n    categoria: -1,\r\n    sub_categoria: -1,\r\n    montante: 0,\r\n    data: \"\",\r\n    //recorrencia: \"\",\r\n    id_conta: -1,\r\n    tipo: props.tipo,\r\n  };\r\n\r\n  const history = useHistory();\r\n  const [\r\n    categoriasData,\r\n    errorCategorias,\r\n    isLoadingCategorias,\r\n  ] = useFetchCategorias(true);\r\n  const [\r\n    subcategoriasData,\r\n    errorSubcategorias,\r\n    isLoadingSubcategorias,\r\n  ] = useFetchSubCategoria();\r\n  const [contasData, errorContas, isLoadingContas] = useFetchContas(true);\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          {props.tipo}\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: IMovimentoData) => {\r\n            SERVICE.methods\r\n              .createReceita(values)\r\n              .then((result) => {\r\n                // depois de inserir com sucesso, faz refresh à pagina\r\n                window.location.reload();\r\n                props.onHide(false);\r\n              })\r\n              .catch((err) => console.log(\"Erro ao fazer registo\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              {/*<div>{JSON.stringify(errors)}</div>*/}\r\n              <BS.Row>\r\n                <BS.Col>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"text\"\r\n                      name=\"descricao\"\r\n                      placeholder=\"descrição\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.descricao}\r\n                      isValid={touched.descricao && !errors.descricao}\r\n                    />\r\n                  </BS.Form.Group>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"categoria\"\r\n                      placeholder=\"categoria\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.categoria}\r\n                      isValid={touched.categoria && !errors.categoria}\r\n                      disabled={isLoadingCategorias}\r\n                    >\r\n                      {isLoadingCategorias ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        categoriasData.map((categoria: ICategoria) => (\r\n                          <option value={categoria.id_categoria}>\r\n                            {categoria.nome}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"sub_categoria\"\r\n                      placeholder=\"subcategoria\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.sub_categoria}\r\n                      isValid={touched.sub_categoria && !errors.sub_categoria}\r\n                      disabled={isLoadingCategorias}\r\n                    >\r\n                      {isLoadingSubcategorias ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        subcategoriasData.map((subcategoria: ISubCategoria) => (\r\n                          <option value={subcategoria.id_subcategoria}>\r\n                            {subcategoria.nome}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"number\"\r\n                      min=\"0.1\"\r\n                      max=\"100000.00\"\r\n                      step=\"0.01\"\r\n                      name=\"montante\"\r\n                      placeholder=\"montante\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.montante}\r\n                      isValid={touched.montante && !errors.montante}\r\n                    />\r\n                  </BS.Form.Group>\r\n\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"date\"\r\n                      name=\"data\"\r\n                      placeholder=\"data\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.data}\r\n                      isValid={touched.data && !errors.data}\r\n                    />\r\n                  </BS.Form.Group>\r\n\r\n                  {/* <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"recorrencia\"\r\n                      placeholder=\"recorrência\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.recorrencia}\r\n                      isValid={touched.recorrencia && !errors.recorrencia}\r\n                      defaultValue=\"recorrência\"\r\n                    >\r\n                      <option>recorrência</option>\r\n                      <option>Mensal</option>\r\n                      <option>Anual</option>\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group> */}\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"id_conta\"\r\n                      placeholder=\"conta\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.id_conta}\r\n                      isValid={touched.id_conta && !errors.id_conta}\r\n                      disabled={isLoadingContas}\r\n                    >\r\n                      {isLoadingContas ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        contasData.map((conta: IConta) => (\r\n                          <option value={conta.id_conta}>{conta.nome}</option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n                </BS.Col>\r\n              </BS.Row>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    /* onClick={() => {\r\n                      props.onHide(false);\r\n                    }} */\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalRegisto;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMe.hook.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchContas.hook.tsx",["151"],"import * as React from \"react\";\r\nimport { SERVICE, IConta } from \"../dashboard.service\";\r\n\r\nexport const useFetchContas = (\r\n  addSelectOption?: boolean\r\n): [data: IConta[], error: any, isLoadig: boolean] => {\r\n  const [contas, setContas] = React.useState<IConta[]>(\r\n    addSelectOption\r\n      ? [\r\n          {\r\n            id_conta: -1,\r\n            id_utilizador: -1,\r\n            nome: \"Selecione...\",\r\n            saldo: \"\",\r\n            tipo: \"\",\r\n          },\r\n        ]\r\n      : []\r\n  );\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getContas().then((r) => {\r\n          setContas([...contas, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return [contas, error, isLoading];\r\n};\r\n\r\nexport default useFetchContas;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMovimentos.hook.tsx",["152"],"import * as React from \"react\";\r\nimport { string } from \"yup/lib/locale\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface IMovimento {\r\n  categoria: {\r\n    id_categoria: number;\r\n    nome: string;\r\n  };\r\n  data: string;\r\n  descricao: string;\r\n  id_conta: {\r\n    id_conta: number;\r\n    nome: string;\r\n    saldo: string;\r\n    tipo: string;\r\n  };\r\n  montante: string;\r\n  sub_categoria: {\r\n    id_subcategoria: number;\r\n    id_categoria: {\r\n      id_categoria: number;\r\n      nome: string;\r\n    };\r\n    nome: string;\r\n  };\r\n  tipo: string;\r\n}\r\n\r\nexport const useFetchMovimentos = (\r\n  page: number\r\n): [data: IMovimento[], dataSize: number, error: any, isLoadig: boolean] => {\r\n  const [response, setResponse] = React.useState<IMovimento[]>([]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getRegistos().then((r) => {\r\n          setResponse(r.data);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const start = page === 1 ? 0 : page * 10;\r\n  const end = start + 10;\r\n  return [response.slice(start, end), response.length, error, isLoading];\r\n};\r\n\r\nexport default useFetchMovimentos;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\components\\modal-registo.component.tsx",["153","154","155"],"import * as React from \"react\";\r\nimport * as BS from \"react-bootstrap\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport { IOrcamentoData, SERVICE } from \"../budget.service\";\r\n\r\nimport useFetchCategorias, {\r\n  ICategoria,\r\n} from \"../../dashboard/fetchers/useFetchCategorias.hook\";\r\n\r\nimport useFetchSubCategoria, {\r\n  ISubCategoria,\r\n} from \"../../dashboard/fetchers/useFetchSubCategorias.hook\";\r\n\r\ninterface IModalOrcamentoProps {\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  id_planeamento: yup.number(),\r\n  id_utilizador: yup.number(),\r\n  categoria: yup.number(),\r\n  sub_categoria: yup.number(),\r\n  montante_limite: yup.number().required(),\r\n  prazo: yup.string().required(),\r\n});\r\n\r\nconst initialValues: IOrcamentoData = {\r\n  id_utilizador: 0,\r\n  categoria: 0,\r\n  sub_categoria: 0,\r\n  montante_limite: 0,\r\n  prazo: \"\",\r\n};\r\n\r\nexport const ModalRegisto = (props: IModalOrcamentoProps) => {\r\n  const history = useHistory();\r\n  const [\r\n    categoriasData,\r\n    errorCategorias,\r\n    isLoadingCategorias,\r\n  ] = useFetchCategorias();\r\n  const [\r\n    subcategoriasData,\r\n    errorSubcategorias,\r\n    isLoadingSubcategorias,\r\n  ] = useFetchSubCategoria();\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          Orçamento{\" \"}\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: IOrcamentoData) => {\r\n            SERVICE.methods\r\n              .createBudget(values)\r\n              .then((result) => {\r\n                console.log(\r\n                  \"Planeamento adicionado com sucesso! -> Redirecionar para não sei\"\r\n                );\r\n                props.onHide(false);\r\n              })\r\n              .catch((err) => console.log(\"Erro ao registar planeamento\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  as=\"select\"\r\n                  name=\"categoria\"\r\n                  placeholder=\"categoria\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.categoria}\r\n                  isValid={touched.categoria && !errors.categoria}\r\n                  disabled={isLoadingCategorias}\r\n                >\r\n                  {isLoadingCategorias ? (\r\n                    <option>Loading...</option>\r\n                  ) : (\r\n                    categoriasData.map((categoria: ICategoria) => (\r\n                      <option value={categoria.id_categoria}>\r\n                        {categoria.nome}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </BS.Form.Control>\r\n              </BS.Form.Group>\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  as=\"select\"\r\n                  name=\"sub_categoria\"\r\n                  placeholder=\"subcategoria\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.sub_categoria}\r\n                  isValid={touched.sub_categoria && !errors.sub_categoria}\r\n                  disabled={isLoadingCategorias}\r\n                >\r\n                  {isLoadingSubcategorias ? (\r\n                    <option>Loading...</option>\r\n                  ) : (\r\n                    subcategoriasData.map((subcategoria: ISubCategoria) => (\r\n                      <option value={subcategoria.id_subcategoria}>\r\n                        {subcategoria.nome}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </BS.Form.Control>\r\n              </BS.Form.Group>\r\n\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  type=\"number\"\r\n                  min=\"0.1\"\r\n                  max=\"100000.00\"\r\n                  step=\"0.01\"\r\n                  name=\"montante_limite\"\r\n                  placeholder=\"Montante Limite\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.montante_limite}\r\n                  isValid={touched.montante_limite && !errors.montante_limite}\r\n                />\r\n              </BS.Form.Group>\r\n\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  type=\"date\"\r\n                  name=\"prazo\"\r\n                  placeholder=\"data\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.prazo}\r\n                  isValid={touched.prazo && !errors.prazo}\r\n                />\r\n              </BS.Form.Group>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalRegisto;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\fetchers\\useFetchPlaneamentos.hook.tsx",["156"],"import * as React from \"react\";\r\nimport { string } from \"yup/lib/locale\";\r\nimport { SERVICE } from \"../budget.service\";\r\n\r\nexport interface IPlaneamento {\r\n  id_planeamento: number;\r\n  montante_limite?: number;\r\n  prazo: string;\r\n  categoria: {\r\n    id_categoria: number;\r\n    nome: string;\r\n  };\r\n}\r\n\r\nexport const useFetchPlaneamentos = (): [\r\n  response: IPlaneamento[],\r\n  error: any,\r\n  isLoadig: boolean\r\n] => {\r\n  const [response, setResponse] = React.useState<IPlaneamento[]>([]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getPlaneamentos().then((r) => {\r\n          setResponse(r.data);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchPlaneamentos;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchCategorias.hook.tsx",["157"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface ICategoria {\r\n  id_categoria?: number;\r\n  nome: string;\r\n}\r\n\r\nexport const useFetchCategorias = (\r\n  addSelectOption?: boolean\r\n): [data: ICategoria[], error: any, isLoadig: boolean] => {\r\n  const [response, setResponse] = React.useState<ICategoria[]>(\r\n    addSelectOption ? [{ id_categoria: -1, nome: \"Selecione...\" }] : []\r\n  );\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getCategorias().then((r) => {\r\n          setResponse([...response, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchCategorias;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSubCategorias.hook.tsx",["158"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface ISubCategoria {\r\n  id_categoria: { id_categoria: number; nome?: string };\r\n  nome: string;\r\n  id_subcategoria: number;\r\n}\r\n\r\nexport const useFetchSubCategorias = (): [\r\n  data: ISubCategoria[],\r\n  error: any,\r\n  isLoadig: boolean\r\n] => {\r\n  const [response, setResponse] = React.useState<ISubCategoria[]>([\r\n    {\r\n      id_subcategoria: -1,\r\n      id_categoria: { id_categoria: -1 },\r\n      nome: \"Selecione...\",\r\n    },\r\n  ]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getSubCategorias().then((r) => {\r\n          setResponse([...response, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchSubCategorias;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchTotaisPorMes.hook.tsx",["159"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport enum ETipoTotal {\r\n  DEBITO = \"DEBITO\",\r\n  CREDITO = \"CREDITO\",\r\n}\r\n\r\nexport interface ITotalMes {\r\n  tipo: ETipoTotal;\r\n  anoMes: string;\r\n  total: number;\r\n}\r\n\r\nexport const useFetchTotaisPorMes = (\r\n  tipo: ETipoTotal\r\n): [data: ITotalMes[], error: any, isLoadig: boolean] => {\r\n  const [response, setResponse] = React.useState<ITotalMes[]>([]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getTotalMes(tipo).then((r) => {\r\n          setResponse(r);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchTotaisPorMes;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\helpers\\authReducer.reducer.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-contas.component.tsx",["160","161","162"],"import * as React from \"react\";\r\nimport * as BS from \"react-bootstrap\";\r\n\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport * as yup from \"yup\";\r\n\r\nimport { IConta, SERVICE } from \"../dashboard.service\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport useFetchContas from \"../fetchers/useFetchContas.hook\";\r\n\r\nexport enum ETipoConta {\r\n  Banco = \"Banco\",\r\n  Carteira = \"Carteira\",\r\n}\r\n\r\ninterface IModalContasProps {\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  nome: yup.string().trim().required().min(1).max(30),\r\n  tipo: yup.string().trim().notOneOf([\"-1\"]),\r\n});\r\n\r\nexport const ModalContas = (props: IModalContasProps) => {\r\n  const initialValues: IConta = {\r\n    nome: \"\",\r\n  };\r\n\r\n  const [contasData, errorContas, isLoadingContas] = useFetchContas();\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          Inserir nova conta\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: IConta) => {\r\n            SERVICE.methods\r\n              .createConta(values)\r\n              .then((result) => {\r\n                props.onHide(false);\r\n                // depois de inserir com sucesso, faz refresh à pagina\r\n                window.location.reload();\r\n              })\r\n              .catch((err) => console.log(\"Erro ao fazer registo\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              {/*<div>{JSON.stringify(errors)}</div>*/}\r\n              <BS.Row>\r\n                <BS.Col>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"text\"\r\n                      name=\"nome\"\r\n                      placeholder=\"nome da conta\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.nome}\r\n                      isValid={touched.nome && !errors.nome}\r\n                    />\r\n                  </BS.Form.Group>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"tipo\"\r\n                      placeholder=\"tipo\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.tipo}\r\n                      isValid={touched.tipo && !errors.tipo}\r\n                    >\r\n                      <option value=\"-1\">Selecione um</option>\r\n                      <option value=\"Banco\">Banco</option>\r\n                      <option value=\"Carteira\">Carteira</option>\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n                </BS.Col>\r\n              </BS.Row>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n\r\n        <BS.Container\r\n          className=\"mt-2 overflow-auto\"\r\n          style={{ maxHeight: \"300px\" }}\r\n        >\r\n          <h5>Contas existentes na BD</h5>\r\n          <BS.Table className=\"table-sm table\">\r\n            <thead>\r\n              <tr>\r\n                <th>id</th>\r\n                <th>nome</th>\r\n                <th>tipo</th>\r\n                <th>options</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {contasData.map((c) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{c.id_conta}</td>\r\n                    <td>{c.nome}</td>\r\n                    <td>{c.tipo}</td>\r\n                    <td>\r\n                      <div\r\n                        role=\"button\"\r\n                        onClick={() => {\r\n                          SERVICE.methods\r\n                            .deleteConta(c.id_conta || -1)\r\n                            .then(() => {})\r\n                            .catch((e) => {});\r\n                        }}\r\n                      >\r\n                        <Icon.Trash></Icon.Trash>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </BS.Table>\r\n        </BS.Container>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalContas;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-categorias.component.tsx",["163","164"],"import * as BS from \"react-bootstrap\";\r\n\r\nimport * as Icon from \"react-bootstrap-icons\";\r\n\r\nimport * as yup from \"yup\";\r\n\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport useFetchCategorias, {\r\n  ICategoria,\r\n} from \"../fetchers/useFetchCategorias.hook\";\r\n\r\ninterface IModalCategoriasProps {\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  nome: yup.string().trim().required().min(1).max(30),\r\n});\r\n\r\nexport const ModalCategorias = (props: IModalCategoriasProps) => {\r\n  const initialValues: ICategoria = {\r\n    nome: \"\",\r\n  };\r\n\r\n  const [\r\n    categoriasData,\r\n    errorCategorias,\r\n    isLoadingCategorias,\r\n  ] = useFetchCategorias(false);\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          Inserir nova categoria\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: ICategoria) => {\r\n            SERVICE.methods\r\n              .createCategoria(values)\r\n              .then((result) => {\r\n                props.onHide(false);\r\n                // depois de inserir com sucesso, faz refresh à pagina\r\n                window.location.reload();\r\n              })\r\n              .catch((err) => console.log(\"Erro ao fazer registo\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              {/*<div>{JSON.stringify(errors)}</div>*/}\r\n              <BS.Row>\r\n                <BS.Col>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"text\"\r\n                      name=\"nome\"\r\n                      placeholder=\"nome da categoria\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.nome}\r\n                      isValid={touched.nome && !errors.nome}\r\n                    />\r\n                  </BS.Form.Group>\r\n                </BS.Col>\r\n              </BS.Row>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n\r\n        <BS.Container\r\n          className=\"mt-2 overflow-auto\"\r\n          style={{ maxHeight: \"300px\" }}\r\n        >\r\n          <h5>Categorias existentes na BD</h5>\r\n          <BS.Table className=\"table-sm table\">\r\n            <thead>\r\n              <tr>\r\n                <th>id</th>\r\n                <th>nome</th>\r\n                <th>options</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {categoriasData.map((cat) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{cat.id_categoria}</td>\r\n                    <td>{cat.nome}</td>\r\n                    <td>\r\n                      <div\r\n                        role=\"button\"\r\n                        onClick={() => {\r\n                          SERVICE.methods\r\n                            .deleteCategoria(cat.id_categoria || -1)\r\n                            .then(() => {})\r\n                            .catch((e) => {});\r\n                        }}\r\n                      >\r\n                        <Icon.Trash></Icon.Trash>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </BS.Table>\r\n        </BS.Container>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalCategorias;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.page.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\defenicoes\\defenicoes.service.tsx",[],{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","severity":1,"message":"170","line":44,"column":6,"nodeType":"171","endLine":44,"endColumn":8,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":38,"column":5,"nodeType":"175","messageId":"176","endLine":38,"endColumn":20},{"ruleId":"173","severity":1,"message":"177","line":39,"column":5,"nodeType":"175","messageId":"176","endLine":39,"endColumn":24},{"ruleId":"173","severity":1,"message":"178","line":89,"column":18,"nodeType":"175","messageId":"176","endLine":89,"endColumn":29},{"ruleId":"173","severity":1,"message":"179","line":94,"column":5,"nodeType":"175","messageId":"176","endLine":94,"endColumn":26},{"ruleId":"173","severity":1,"message":"180","line":95,"column":5,"nodeType":"175","messageId":"176","endLine":95,"endColumn":30},{"ruleId":"173","severity":1,"message":"181","line":101,"column":5,"nodeType":"175","messageId":"176","endLine":101,"endColumn":25},{"ruleId":"173","severity":1,"message":"182","line":102,"column":5,"nodeType":"175","messageId":"176","endLine":102,"endColumn":29},{"ruleId":"169","severity":1,"message":"170","line":115,"column":6,"nodeType":"171","endLine":115,"endColumn":8,"suggestions":"183"},{"ruleId":"173","severity":1,"message":"184","line":6,"column":13,"nodeType":"175","messageId":"176","endLine":6,"endColumn":16},{"ruleId":"173","severity":1,"message":"185","line":18,"column":5,"nodeType":"175","messageId":"176","endLine":18,"endColumn":22},{"ruleId":"173","severity":1,"message":"186","line":19,"column":5,"nodeType":"175","messageId":"176","endLine":19,"endColumn":26},{"ruleId":"173","severity":1,"message":"187","line":10,"column":7,"nodeType":"175","messageId":"176","endLine":10,"endColumn":14},{"ruleId":"173","severity":1,"message":"188","line":55,"column":9,"nodeType":"175","messageId":"176","endLine":55,"endColumn":16},{"ruleId":"173","severity":1,"message":"189","line":58,"column":5,"nodeType":"175","messageId":"176","endLine":58,"endColumn":20},{"ruleId":"173","severity":1,"message":"190","line":63,"column":5,"nodeType":"175","messageId":"176","endLine":63,"endColumn":23},{"ruleId":"173","severity":1,"message":"178","line":66,"column":22,"nodeType":"175","messageId":"176","endLine":66,"endColumn":33},{"ruleId":"169","severity":1,"message":"191","line":35,"column":6,"nodeType":"171","endLine":35,"endColumn":8,"suggestions":"192"},{"ruleId":"173","severity":1,"message":"193","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":16},{"ruleId":"173","severity":1,"message":"188","line":42,"column":9,"nodeType":"175","messageId":"176","endLine":42,"endColumn":16},{"ruleId":"173","severity":1,"message":"189","line":45,"column":5,"nodeType":"175","messageId":"176","endLine":45,"endColumn":20},{"ruleId":"173","severity":1,"message":"190","line":50,"column":5,"nodeType":"175","messageId":"176","endLine":50,"endColumn":23},{"ruleId":"173","severity":1,"message":"193","line":2,"column":10,"nodeType":"175","messageId":"176","endLine":2,"endColumn":16},{"ruleId":"169","severity":1,"message":"194","line":30,"column":6,"nodeType":"171","endLine":30,"endColumn":8,"suggestions":"195"},{"ruleId":"169","severity":1,"message":"194","line":37,"column":6,"nodeType":"171","endLine":37,"endColumn":8,"suggestions":"196"},{"ruleId":"169","severity":1,"message":"197","line":34,"column":6,"nodeType":"171","endLine":34,"endColumn":8,"suggestions":"198"},{"ruleId":"173","severity":1,"message":"199","line":10,"column":10,"nodeType":"175","messageId":"176","endLine":10,"endColumn":20},{"ruleId":"173","severity":1,"message":"178","line":35,"column":22,"nodeType":"175","messageId":"176","endLine":35,"endColumn":33},{"ruleId":"173","severity":1,"message":"200","line":35,"column":35,"nodeType":"175","messageId":"176","endLine":35,"endColumn":50},{"ruleId":"173","severity":1,"message":"189","line":30,"column":5,"nodeType":"175","messageId":"176","endLine":30,"endColumn":20},{"ruleId":"173","severity":1,"message":"201","line":31,"column":5,"nodeType":"175","messageId":"176","endLine":31,"endColumn":24},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["204"],"@typescript-eslint/no-unused-vars","'errorMovimentos' is assigned a value but never used.","Identifier","unusedVar","'isLoadingMovimentos' is assigned a value but never used.","'errorContas' is assigned a value but never used.","'errorTotaisMesCredito' is assigned a value but never used.","'isLoadingTotaisMesCredito' is assigned a value but never used.","'errorTotaisMesDebito' is assigned a value but never used.","'isLoadingTotaisMesDebito' is assigned a value but never used.",["205"],"'yup' is defined but never used.","'errorPlaneamentos' is assigned a value but never used.","'isLoadingPlaneamentos' is assigned a value but never used.","'headers' is assigned a value but never used.","'history' is assigned a value but never used.","'errorCategorias' is assigned a value but never used.","'errorSubcategorias' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'contas'. Either include it or remove the dependency array. You can also do a functional update 'setContas(c => ...)' if you only need 'contas' in the 'setContas' call.",["206"],"'string' is defined but never used.","React Hook React.useEffect has a missing dependency: 'response'. Either include it or remove the dependency array. You can also do a functional update 'setResponse(r => ...)' if you only need 'response' in the 'setResponse' call.",["207"],["208"],"React Hook React.useEffect has a missing dependency: 'tipo'. Either include it or remove the dependency array.",["209"],"'useHistory' is defined but never used.","'isLoadingContas' is assigned a value but never used.","'isLoadingCategorias' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"210","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"215","fix":"217"},{"desc":"218","fix":"219"},"Update the dependencies array to be: [history]",{"range":"220","text":"221"},{"range":"222","text":"221"},"Update the dependencies array to be: [contas]",{"range":"223","text":"224"},"Update the dependencies array to be: [response]",{"range":"225","text":"226"},{"range":"227","text":"226"},"Update the dependencies array to be: [tipo]",{"range":"228","text":"229"},[1084,1086],"[history]",[3659,3661],[913,915],"[contas]",[858,860],"[response]",[958,960],[844,846],"[tipo]"]