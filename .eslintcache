[{"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\index.tsx":"1","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\reportWebVitals.ts":"2","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\App.tsx":"3","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.page.tsx":"4","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.styled.tsx":"5","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.page.tsx":"6","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.styled.tsx":"7","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.service.tsx":"8","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.page.tsx":"9","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.service.tsx":"10","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.styled.tsx":"11","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-registo.component.tsx":"12","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.service.tsx":"13","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSaldoTotal.hook.tsx":"14","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchCategorias.hook.tsx":"15","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSubCategorias.hook.tsx":"16","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchContas.hook.tsx":"17","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.page.tsx":"18","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\components\\modal-registo.component.tsx":"19","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.service.tsx":"20","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMovimentos.hook.tsx":"21","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMe.hook.tsx":"22"},{"size":500,"mtime":1607102408355,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":1607102408415,"results":"25","hashOfConfig":"24"},{"size":1211,"mtime":1610404453282,"results":"26","hashOfConfig":"24"},{"size":9707,"mtime":1611584750103,"results":"27","hashOfConfig":"24"},{"size":1203,"mtime":1611505399396,"results":"28","hashOfConfig":"24"},{"size":4360,"mtime":1611511220586,"results":"29","hashOfConfig":"24"},{"size":799,"mtime":1608207322227,"results":"30","hashOfConfig":"24"},{"size":556,"mtime":1611511232830,"results":"31","hashOfConfig":"24"},{"size":9344,"mtime":1609955098991,"results":"32","hashOfConfig":"24"},{"size":691,"mtime":1608233231332,"results":"33","hashOfConfig":"24"},{"size":870,"mtime":1608306562906,"results":"34","hashOfConfig":"24"},{"size":9388,"mtime":1611504039858,"results":"35","hashOfConfig":"24"},{"size":1845,"mtime":1611510569970,"results":"36","hashOfConfig":"24"},{"size":885,"mtime":1608408354184,"results":"37","hashOfConfig":"24"},{"size":904,"mtime":1611421547201,"results":"38","hashOfConfig":"24"},{"size":1049,"mtime":1611501086662,"results":"39","hashOfConfig":"24"},{"size":1120,"mtime":1611512698295,"results":"40","hashOfConfig":"24"},{"size":3729,"mtime":1610404453286,"results":"41","hashOfConfig":"24"},{"size":6331,"mtime":1611499699286,"results":"42","hashOfConfig":"24"},{"size":1093,"mtime":1611499419150,"results":"43","hashOfConfig":"24"},{"size":1232,"mtime":1611500722357,"results":"44","hashOfConfig":"24"},{"size":1139,"mtime":1611511526421,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"qkq85h",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"48"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\index.tsx",[],["101","102"],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\reportWebVitals.ts",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\App.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.page.tsx",["103","104","105","106"],"import * as React from \"react\";\r\nimport * as S from \"./dashboard.styled\";\r\n\r\nimport * as BS from \"react-bootstrap\";\r\nimport { Doughnut } from \"react-chartjs-2\";\r\n\r\nimport ModalRegisto from \"./components/modal-registo.component\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport useFetchSaldoTotal from \"./fetchers/useFetchSaldoTotal.hook\";\r\nimport useFetchMovimentos from \"./fetchers/useFetchMovimentos.hook\";\r\nimport useFetchContas from \"./fetchers/useFetchContas.hook\";\r\nimport useFetchMe from \"./fetchers/useFetchMe.hook\";\r\n\r\ninterface IDashboarPageProps {}\r\n\r\nexport const DashboarPage: React.FC<IDashboarPageProps> = (props) => {\r\n  const history = useHistory();\r\n\r\n  const [\r\n    movimentos,\r\n    errorMovimentos,\r\n    isLoadingMovimentos,\r\n  ] = useFetchMovimentos();\r\n\r\n  const [contas, errorContas, isLoadingContas] = useFetchContas(false);\r\n\r\n  const [me] = useFetchMe();\r\n\r\n  const dataDespesa = {\r\n    labels: [\"Supermercado\", \"Cinema\", \"Ginásio\"],\r\n    datasets: [\r\n      {\r\n        data: [300, 50, 100],\r\n        backgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const dataReceita = {\r\n    labels: [\"EMprego\", \"Bolsa\", \"Outros\"],\r\n    datasets: [\r\n      {\r\n        data: [900, 130, 100],\r\n        backgroundColor: [\"#3ba549\", \"#3642EB\", \"#F0CE06\"],\r\n        hoverBackgroundColor: [\"#FF6384\", \"#36A2EB\", \"#FFCE56\"],\r\n      },\r\n    ],\r\n  };\r\n\r\n  const [showModalReceita, setShouModalReceita] = React.useState<boolean>(\r\n    false\r\n  );\r\n\r\n  const renderModalReceita = () => {\r\n    return (\r\n      <ModalRegisto\r\n        show={showModalReceita}\r\n        onHide={setShouModalReceita}\r\n      ></ModalRegisto>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <S.PageContainer>\r\n      <BS.Container fluid className=\"h-100\">\r\n        <BS.Row className=\"h-100\">\r\n          <BS.Col lg={2} className=\"sidebar\">\r\n            <BS.Container>\r\n              <BS.Row\r\n                className=\"branco\"\r\n                onClick={() => {\r\n                  history.push(\"/dashboard\");\r\n                }}\r\n              >\r\n                <h1 className=\"w-100\">Save iT</h1>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Image\r\n                    className={\"avatar\"}\r\n                    src=\"images/avatar.png\"\r\n                    rounded\r\n                  />\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <h5 className=\"branco\">{`Bem vindo(a) ${me.username}`}</h5>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      history.push(\"/budget\");\r\n                    }}\r\n                  >\r\n                    Planeamentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Investimentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Alertas\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Definições\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      localStorage.clear();\r\n                      history.push(\"/login\");\r\n                    }}\r\n                  >\r\n                    Sair\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Container>\r\n          </BS.Col>\r\n          <BS.Col lg={10}>\r\n            <BS.Container fluid className=\"mt-2\">\r\n              <BS.Row>\r\n                <BS.Col lg={3}>\r\n                  <BS.Card className={\"saldo-total\"}>\r\n                    <BS.Card.Body>\r\n                      <BS.Card.Title>Saldo Total</BS.Card.Title>\r\n                      <BS.Card.Text>\r\n                        {isLoadingContas\r\n                          ? \"loading...\"\r\n                          : contas.length &&\r\n                            contas\r\n                              .map((conta) => Number.parseFloat(conta.saldo))\r\n                              .reduce((acc, nextval) => acc + nextval)}\r\n                      </BS.Card.Text>\r\n                    </BS.Card.Body>\r\n                  </BS.Card>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-conta\"} indicators={false}>\r\n                    {contas.map((conta) => {\r\n                      return (\r\n                        <BS.Carousel.Item>\r\n                          <h5>Saldo Conta</h5>\r\n                          <h5>{`${conta.saldo} €`}</h5>\r\n                          <p>{conta.nome}</p>\r\n                        </BS.Carousel.Item>\r\n                      );\r\n                    })}\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-receita\"} indicators={false}>\r\n                    <BS.Carousel.Item>\r\n                      <h5>Receita Mensal</h5>\r\n                      <h5>4,00€</h5>\r\n                      <p>novembro 2020</p>\r\n                    </BS.Carousel.Item>\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Carousel className={\"saldo-despesa\"} indicators={false}>\r\n                    <BS.Carousel.Item>\r\n                      <h5>Despesa Mensal</h5>\r\n                      <h5>56,00€</h5>\r\n                      <p>novembro 2020</p>\r\n                    </BS.Carousel.Item>\r\n                  </BS.Carousel>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className={\"mt-2\"}>\r\n                <BS.Col lg=\"8\">\r\n                  <BS.Container className=\"mt-2 mov-container\">\r\n                    <BS.Table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Data</th>\r\n                          <th>Conta</th>\r\n                          <th>Categoria</th>\r\n                          <th>Subcategoria</th>\r\n                          <th>Descrição</th>\r\n                          <th>Valor</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {movimentos.map((mov) => {\r\n                          return (\r\n                            <tr>\r\n                              <td>{mov.data}</td>\r\n                              <td>{mov.id_conta.nome}</td>\r\n                              <td>{mov.categoria.nome}</td>\r\n                              <td>{mov.sub_categoria.nome}</td>\r\n                              <td>{mov.descricao}</td>\r\n                              <td>{mov.montante}</td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                      </tbody>\r\n                    </BS.Table>\r\n                  </BS.Container>\r\n                </BS.Col>\r\n                <BS.Col lg=\"4\">\r\n                  <BS.Row>\r\n                    <BS.Col lg=\"12\">\r\n                      <BS.Card>\r\n                        <BS.Card.Body>\r\n                          <BS.Card.Title>Receitas novembro 2020</BS.Card.Title>\r\n                          <BS.Card.Text>\r\n                            <Doughnut data={dataReceita} />\r\n                          </BS.Card.Text>\r\n                        </BS.Card.Body>\r\n                      </BS.Card>\r\n                    </BS.Col>\r\n                  </BS.Row>\r\n                  <BS.Row className={\"mt-2\"}>\r\n                    <BS.Col lg={12}>\r\n                      <BS.Card>\r\n                        <BS.Card.Body>\r\n                          <BS.Card.Title>Despesas novembro 2020</BS.Card.Title>\r\n                          <BS.Card.Text>\r\n                            <Doughnut data={dataDespesa} />\r\n                          </BS.Card.Text>\r\n                        </BS.Card.Body>\r\n                      </BS.Card>\r\n                    </BS.Col>\r\n                  </BS.Row>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Container>\r\n          </BS.Col>\r\n        </BS.Row>\r\n      </BS.Container>\r\n      <BS.DropdownButton\r\n        id=\"dropdown-basic-button\"\r\n        title=\"+\"\r\n        drop={\"up\"}\r\n        className=\"add-button\"\r\n      >\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShouModalReceita(!showModalReceita);\r\n          }}\r\n        >\r\n          Receita\r\n        </BS.Dropdown.Item>\r\n        <BS.Dropdown.Item href=\"#/action-2\">Despesa</BS.Dropdown.Item>\r\n        <BS.Dropdown.Item href=\"#/action-3\">Conta</BS.Dropdown.Item>\r\n        <BS.Dropdown.Item href=\"#/action-4\">Categoria</BS.Dropdown.Item>\r\n      </BS.DropdownButton>\r\n      {renderModalReceita()}\r\n    </S.PageContainer>\r\n  );\r\n};\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.page.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\login\\login.service.tsx",["107"],"import axios from \"axios\";\r\n\r\nexport interface ILoginData {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nconst authToken = JSON.parse(localStorage.getItem(\"token\") || \"{}\");\r\n\r\nconst headers = {\r\n  \"Content-Type\": \"application/json\",\r\n  Authorization: `Token ${authToken.auth_token} `,\r\n};\r\n\r\nexport const SERVICE = {\r\n  routes: {\r\n    login: \"api/v1/token/login/\",\r\n    me: \"api/v1/users/me/\",\r\n  },\r\n  methods: {\r\n    doLogin: (data: ILoginData) => {\r\n      return axios.post(`http://127.0.0.1:8000/${SERVICE.routes.login}`, data);\r\n    },\r\n  },\r\n};\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.page.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\register\\register.styled.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\components\\modal-registo.component.tsx",["108","109","110","111"],"import * as React from \"react\";\r\nimport * as BS from \"react-bootstrap\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { IMovimentoData, SERVICE } from \"../dashboard.service\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport useFetchCategorias, {\r\n  ICategoria,\r\n} from \"../fetchers/useFetchCategorias.hook\";\r\n\r\nimport useFetchSubCategoria, {\r\n  ISubCategoria,\r\n} from \"../fetchers/useFetchSubCategorias.hook\";\r\n\r\nimport useFetchContas, { IConta } from \"../fetchers/useFetchContas.hook\";\r\n\r\ninterface IModalRegistoProps {\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  descricao: yup.string().trim().required().min(1).max(30),\r\n  categoria: yup.number().required().notOneOf([-1]),\r\n  sub_categoria: yup.number().notOneOf([-1]),\r\n  montante: yup.number().required().min(0.1).max(10000),\r\n  data: yup.string().required(),\r\n  // recorrencia: yup.string().trim().oneOf([\"Mensal\", \"Anual\"]),\r\n  id_conta: yup.number().required().notOneOf([-1]),\r\n  tipo: yup.string().trim(),\r\n});\r\n\r\nconst initialValues: IMovimentoData = {\r\n  descricao: \"\",\r\n  categoria: -1,\r\n  sub_categoria: -1,\r\n  montante: 0,\r\n  data: \"\",\r\n  //recorrencia: \"\",\r\n  id_conta: -1,\r\n  tipo: \"receita\",\r\n};\r\n\r\nexport const ModalRegisto = (props: IModalRegistoProps) => {\r\n  const history = useHistory();\r\n  const [\r\n    categoriasData,\r\n    errorCategorias,\r\n    isLoadingCategorias,\r\n  ] = useFetchCategorias();\r\n  const [\r\n    subcategoriasData,\r\n    errorSubcategorias,\r\n    isLoadingSubcategorias,\r\n  ] = useFetchSubCategoria();\r\n  const [contasData, errorContas, isLoadingContas] = useFetchContas(true);\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          Receita{\" \"}\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: IMovimentoData) => {\r\n            SERVICE.methods\r\n              .createReceita(values)\r\n              .then((result) => {\r\n                console.log(\r\n                  \"RECEITA COM SUCESSO! -> Redirecionar para DASHBOARD\"\r\n                );\r\n                props.onHide(false);\r\n              })\r\n              .catch((err) => console.log(\"Erro ao fazer registo\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              {<div>{JSON.stringify(errors)}</div>}\r\n              <BS.Row>\r\n                <BS.Col>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"text\"\r\n                      name=\"descricao\"\r\n                      placeholder=\"descrição\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.descricao}\r\n                      isValid={touched.descricao && !errors.descricao}\r\n                    />\r\n                  </BS.Form.Group>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"categoria\"\r\n                      placeholder=\"categoria\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.categoria}\r\n                      isValid={touched.categoria && !errors.categoria}\r\n                      disabled={isLoadingCategorias}\r\n                    >\r\n                      {isLoadingCategorias ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        categoriasData.map((categoria: ICategoria) => (\r\n                          <option value={categoria.id_categoria}>\r\n                            {categoria.nome}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"sub_categoria\"\r\n                      placeholder=\"subcategoria\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.sub_categoria}\r\n                      isValid={touched.sub_categoria && !errors.sub_categoria}\r\n                      disabled={isLoadingCategorias}\r\n                    >\r\n                      {isLoadingSubcategorias ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        subcategoriasData.map((subcategoria: ISubCategoria) => (\r\n                          <option value={subcategoria.id_subcategoria}>\r\n                            {subcategoria.nome}\r\n                          </option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"number\"\r\n                      min=\"0.1\"\r\n                      max=\"100000.00\"\r\n                      step=\"0.01\"\r\n                      name=\"montante\"\r\n                      placeholder=\"montante\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.montante}\r\n                      isValid={touched.montante && !errors.montante}\r\n                    />\r\n                  </BS.Form.Group>\r\n\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      type=\"date\"\r\n                      name=\"data\"\r\n                      placeholder=\"data\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.data}\r\n                      isValid={touched.data && !errors.data}\r\n                    />\r\n                  </BS.Form.Group>\r\n\r\n                  {/* <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"recorrencia\"\r\n                      placeholder=\"recorrência\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.recorrencia}\r\n                      isValid={touched.recorrencia && !errors.recorrencia}\r\n                      defaultValue=\"recorrência\"\r\n                    >\r\n                      <option>recorrência</option>\r\n                      <option>Mensal</option>\r\n                      <option>Anual</option>\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group> */}\r\n                  <BS.Form.Group>\r\n                    <BS.Form.Control\r\n                      className=\"italico\"\r\n                      as=\"select\"\r\n                      name=\"id_conta\"\r\n                      placeholder=\"conta\"\r\n                      onChange={handleChange}\r\n                      onBlur={handleBlur}\r\n                      value={values.id_conta}\r\n                      isValid={touched.id_conta && !errors.id_conta}\r\n                      disabled={isLoadingContas}\r\n                    >\r\n                      {isLoadingContas ? (\r\n                        <option>Loading...</option>\r\n                      ) : (\r\n                        contasData.map((conta: IConta) => (\r\n                          <option value={conta.id_conta}>{conta.nome}</option>\r\n                        ))\r\n                      )}\r\n                    </BS.Form.Control>\r\n                  </BS.Form.Group>\r\n                </BS.Col>\r\n              </BS.Row>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    /* onClick={() => {\r\n                      props.onHide(false);\r\n                    }} */\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalRegisto;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\dashboard.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSaldoTotal.hook.tsx",[],["112","113"],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchCategorias.hook.tsx",["114"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface ICategoria {\r\n  id_categoria: number;\r\n  nome: string;\r\n}\r\n\r\nexport const useFetchCategorias = (): [\r\n  data: ICategoria[],\r\n  error: any,\r\n  isLoadig: boolean\r\n] => {\r\n  const [response, setResponse] = React.useState<ICategoria[]>([\r\n    { id_categoria: -1, nome: \"Selecione...\" },\r\n  ]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getCategorias().then((r) => {\r\n          setResponse([...response, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchCategorias;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchSubCategorias.hook.tsx",["115"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface ISubCategoria {\r\n  id_categoria: { id_categoria: number; nome?: string };\r\n  nome: string;\r\n  id_subcategoria: number;\r\n}\r\n\r\nexport const useFetchSubCategorias = (): [\r\n  data: ISubCategoria[],\r\n  error: any,\r\n  isLoadig: boolean\r\n] => {\r\n  const [response, setResponse] = React.useState<ISubCategoria[]>([\r\n    {\r\n      id_subcategoria: -1,\r\n      id_categoria: { id_categoria: -1 },\r\n      nome: \"Selecione...\",\r\n    },\r\n  ]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getSubCategorias().then((r) => {\r\n          setResponse([...response, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchSubCategorias;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchContas.hook.tsx",["116"],"import * as React from \"react\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface IConta {\r\n  id_conta: number;\r\n  id_utilizador: number;\r\n  nome: string;\r\n  saldo: string;\r\n  tipo: string;\r\n}\r\n\r\nexport const useFetchContas = (\r\n  addSelectOption?: boolean\r\n): [data: IConta[], error: any, isLoadig: boolean] => {\r\n  const [contas, setContas] = React.useState<IConta[]>(\r\n    addSelectOption\r\n      ? [\r\n          {\r\n            id_conta: -1,\r\n            id_utilizador: -1,\r\n            nome: \"Selecione...\",\r\n            saldo: \"\",\r\n            tipo: \"\",\r\n          },\r\n        ]\r\n      : []\r\n  );\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getContas().then((r) => {\r\n          setContas([...contas, ...r.data]);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  return [contas, error, isLoading];\r\n};\r\n\r\nexport default useFetchContas;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.page.tsx",["117"],"import * as React from \"react\";\r\nimport * as S from \"../../pages/dashboard/dashboard.styled\";\r\n\r\nimport * as BS from \"react-bootstrap\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as yup from \"yup\";\r\n\r\nimport ModalRegisto from \"./components/modal-registo.component\";\r\n\r\n\r\n  interface IBudgetPageProps {}\r\n\r\n\r\n  export const BudgetPage: React.FC<IBudgetPageProps> = (props) => {\r\n    const history = useHistory();\r\n\r\n    const [showModalOrcamento, setShowModalOrcamento] = React.useState<boolean>(\r\n        false\r\n      );\r\n    \r\n      const renderModalOrcamento= () => {\r\n        return (\r\n          <ModalRegisto\r\n            show={showModalOrcamento}\r\n            onHide={setShowModalOrcamento}\r\n          ></ModalRegisto>\r\n        );\r\n      };\r\n\r\n    return (\r\n      <S.PageContainer>\r\n      <BS.Container fluid className=\"h-100\">\r\n        <BS.Row className=\"h-100\">\r\n          <BS.Col lg={2} className=\"sidebar\">\r\n            <BS.Container>\r\n              <BS.Row\r\n                className=\"branco\"\r\n                onClick={() => {\r\n                  history.push(\"/dashboard\");\r\n                }}\r\n              >\r\n                <h1 className=\"w-100\">Save iT</h1>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Image\r\n                    className={\"avatar\"}\r\n                    src=\"images/avatar.png\"\r\n                    rounded\r\n                  />\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <h5 className=\"branco\">Bem vindo Tiago!</h5>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Planeamentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Investimentos\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Alertas\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button variant=\"secondary\" className=\"fundo-cizento\">\r\n                    Definições\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n              <BS.Row className=\"mt-2\">\r\n                <BS.Col lg={12}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    className=\"fundo-cizento\"\r\n                    onClick={() => {\r\n                      history.push(\"/login\");\r\n                    }}\r\n                  >\r\n                    Sair\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Container>\r\n          </BS.Col> \r\n        </BS.Row>\r\n      </BS.Container>\r\n\r\n      <BS.DropdownButton\r\n        id=\"dropdown-basic-button\"\r\n        title=\"+\"\r\n        drop={\"up\"}\r\n        className=\"add-button\"\r\n      >\r\n        <BS.Dropdown.Item\r\n          onClick={() => {\r\n            setShowModalOrcamento(!showModalOrcamento);\r\n          }}\r\n        >Novo Orçamento\r\n        </BS.Dropdown.Item>\r\n      </BS.DropdownButton>\r\n      {renderModalOrcamento()}\r\n      </S.PageContainer>      \r\n    );\r\n};","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\components\\modal-registo.component.tsx",["118","119","120"],"import * as React from \"react\";\r\nimport * as BS from \"react-bootstrap\";\r\nimport * as yup from \"yup\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { Formik } from \"formik\";\r\n\r\nimport { IOrcamentoData, SERVICE } from \"../budget.service\";\r\n\r\nimport useFetchCategorias, {\r\n  ICategoria,\r\n} from \"../../dashboard/fetchers/useFetchCategorias.hook\";\r\n\r\nimport useFetchSubCategoria, {\r\n  ISubCategoria,\r\n} from \"../../dashboard/fetchers/useFetchSubCategorias.hook\";\r\n\r\ninterface IModalOrcamentoProps {\r\n  show: boolean;\r\n  onHide: (show: boolean) => void;\r\n}\r\n\r\nconst schema = yup.object({\r\n  id_planeamento: yup.number(),\r\n  id_utilizador: yup.number(),\r\n  categoria: yup.number(),\r\n  sub_categoria: yup.number(),\r\n  montante_limite: yup.number().required(),\r\n  prazo: yup.string().required(),\r\n});\r\n\r\nconst initialValues: IOrcamentoData = {\r\n  id_utilizador: 0,\r\n  categoria: 0,\r\n  sub_categoria: 0,\r\n  montante_limite: 0,\r\n  prazo: \"\",\r\n};\r\n\r\nexport const ModalRegisto = (props: IModalOrcamentoProps) => {\r\n  const history = useHistory();\r\n  const [\r\n    categoriasData,\r\n    errorCategorias,\r\n    isLoadingCategorias,\r\n  ] = useFetchCategorias();\r\n  const [\r\n    subcategoriasData,\r\n    errorSubcategorias,\r\n    isLoadingSubcategorias,\r\n  ] = useFetchSubCategoria();\r\n\r\n  return (\r\n    <BS.Modal\r\n      show={props.show}\r\n      onHide={() => props.onHide(false)}\r\n      dialogClassName=\"modal-90w\"\r\n      aria-labelledby=\"example-custom-modal-styling-title\"\r\n    >\r\n      <BS.Modal.Header closeButton>\r\n        <BS.Modal.Title id=\"example-custom-modal-styling-title\">\r\n          Orçamento{\" \"}\r\n        </BS.Modal.Title>\r\n      </BS.Modal.Header>\r\n      <BS.Modal.Body>\r\n        <Formik\r\n          validationSchema={schema}\r\n          onSubmit={(values: IOrcamentoData) => {\r\n            SERVICE.methods\r\n              .createBudget(values)\r\n              .then((result) => {\r\n                console.log(\r\n                  \"Planeamento adicionado com sucesso! -> Redirecionar para não sei\"\r\n                );\r\n                props.onHide(false);\r\n              })\r\n              .catch((err) => console.log(\"Erro ao registar planeamento\"));\r\n          }}\r\n          initialValues={initialValues}\r\n        >\r\n          {({\r\n            handleSubmit,\r\n            handleChange,\r\n            handleBlur,\r\n            values,\r\n            touched,\r\n            isValid,\r\n            errors,\r\n          }) => (\r\n            <BS.Form noValidate onSubmit={handleSubmit} className=\"w-100\">\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  as=\"select\"\r\n                  name=\"categoria\"\r\n                  placeholder=\"categoria\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.categoria}\r\n                  isValid={touched.categoria && !errors.categoria}\r\n                  disabled={isLoadingCategorias}\r\n                >\r\n                  {isLoadingCategorias ? (\r\n                    <option>Loading...</option>\r\n                  ) : (\r\n                    categoriasData.map((categoria: ICategoria) => (\r\n                      <option value={categoria.id_categoria}>\r\n                        {categoria.nome}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </BS.Form.Control>\r\n              </BS.Form.Group>\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  as=\"select\"\r\n                  name=\"sub_categoria\"\r\n                  placeholder=\"subcategoria\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.sub_categoria}\r\n                  isValid={touched.sub_categoria && !errors.sub_categoria}\r\n                  disabled={isLoadingCategorias}\r\n                >\r\n                  {isLoadingSubcategorias ? (\r\n                    <option>Loading...</option>\r\n                  ) : (\r\n                    subcategoriasData.map((subcategoria: ISubCategoria) => (\r\n                      <option value={subcategoria.id_subcategoria}>\r\n                        {subcategoria.nome}\r\n                      </option>\r\n                    ))\r\n                  )}\r\n                </BS.Form.Control>\r\n              </BS.Form.Group>\r\n\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  type=\"number\"\r\n                  min=\"0.1\"\r\n                  max=\"100000.00\"\r\n                  step=\"0.01\"\r\n                  name=\"montante_limite\"\r\n                  placeholder=\"Montante Limite\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.montante_limite}\r\n                  isValid={touched.montante_limite && !errors.montante_limite}\r\n                />\r\n              </BS.Form.Group>\r\n\r\n              <BS.Form.Group>\r\n                <BS.Form.Control\r\n                  className=\"italico\"\r\n                  type=\"date\"\r\n                  name=\"prazo\"\r\n                  placeholder=\"data\"\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  value={values.prazo}\r\n                  isValid={touched.prazo && !errors.prazo}\r\n                />\r\n              </BS.Form.Group>\r\n\r\n              <BS.Row className=\"justify-content-between\">\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                  >\r\n                    salvar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n                <BS.Col lg={3}>\r\n                  <BS.Button\r\n                    variant=\"outline-secondary\"\r\n                    type=\"submit\"\r\n                    className=\"w-100 negrito\"\r\n                    onClick={() => {\r\n                      props.onHide(false);\r\n                    }}\r\n                  >\r\n                    voltar\r\n                  </BS.Button>\r\n                </BS.Col>\r\n              </BS.Row>\r\n            </BS.Form>\r\n          )}\r\n        </Formik>\r\n      </BS.Modal.Body>\r\n    </BS.Modal>\r\n  );\r\n};\r\n\r\nexport default ModalRegisto;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\budget\\budget.service.tsx",[],"C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMovimentos.hook.tsx",["121"],"import * as React from \"react\";\r\nimport { string } from \"yup/lib/locale\";\r\nimport { SERVICE } from \"../dashboard.service\";\r\n\r\nexport interface IMovimento {\r\n  categoria: {\r\n    id_categoria: number;\r\n    nome: string;\r\n  };\r\n  data: string;\r\n  descricao: string;\r\n  id_conta: {\r\n    id_conta: number;\r\n    nome: string;\r\n    saldo: string;\r\n    tipo: string;\r\n  };\r\n  montante: string;\r\n  sub_categoria: {\r\n    id_subcategoria: number;\r\n    id_categoria: {\r\n      id_categoria: number;\r\n      nome: string;\r\n    };\r\n    nome: string;\r\n  };\r\n  tipo: string;\r\n}\r\n\r\nexport const useFetchMovimentos = (): [\r\n  data: IMovimento[],\r\n  error: any,\r\n  isLoadig: boolean\r\n] => {\r\n  const [response, setResponse] = React.useState<IMovimento[]>([]);\r\n  const [error, setError] = React.useState(null);\r\n  const [isLoading, setIsLoading] = React.useState(true);\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = () => {\r\n      try {\r\n        SERVICE.methods.getRegistos().then((r) => {\r\n          setResponse(r.data);\r\n          setIsLoading(false);\r\n        });\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return [response, error, isLoading];\r\n};\r\n\r\nexport default useFetchMovimentos;\r\n","C:\\Users\\Irene\\Documents\\Ensino\\PSI\\2020-2021\\PPSI\\Projeto\\SaveIt\\Código frontend\\save-it\\src\\pages\\dashboard\\fetchers\\useFetchMe.hook.tsx",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":11,"column":8,"nodeType":"128","messageId":"129","endLine":11,"endColumn":26},{"ruleId":"126","severity":1,"message":"130","line":23,"column":5,"nodeType":"128","messageId":"129","endLine":23,"endColumn":20},{"ruleId":"126","severity":1,"message":"131","line":24,"column":5,"nodeType":"128","messageId":"129","endLine":24,"endColumn":24},{"ruleId":"126","severity":1,"message":"132","line":27,"column":18,"nodeType":"128","messageId":"129","endLine":27,"endColumn":29},{"ruleId":"126","severity":1,"message":"133","line":10,"column":7,"nodeType":"128","messageId":"129","endLine":10,"endColumn":14},{"ruleId":"126","severity":1,"message":"134","line":49,"column":9,"nodeType":"128","messageId":"129","endLine":49,"endColumn":16},{"ruleId":"126","severity":1,"message":"135","line":52,"column":5,"nodeType":"128","messageId":"129","endLine":52,"endColumn":20},{"ruleId":"126","severity":1,"message":"136","line":57,"column":5,"nodeType":"128","messageId":"129","endLine":57,"endColumn":23},{"ruleId":"126","severity":1,"message":"132","line":60,"column":22,"nodeType":"128","messageId":"129","endLine":60,"endColumn":33},{"ruleId":"122","replacedBy":"137"},{"ruleId":"124","replacedBy":"138"},{"ruleId":"139","severity":1,"message":"140","line":32,"column":6,"nodeType":"141","endLine":32,"endColumn":8,"suggestions":"142"},{"ruleId":"139","severity":1,"message":"140","line":37,"column":6,"nodeType":"141","endLine":37,"endColumn":8,"suggestions":"143"},{"ruleId":"139","severity":1,"message":"144","line":43,"column":6,"nodeType":"141","endLine":43,"endColumn":8,"suggestions":"145"},{"ruleId":"126","severity":1,"message":"146","line":6,"column":13,"nodeType":"128","messageId":"129","endLine":6,"endColumn":16},{"ruleId":"126","severity":1,"message":"134","line":42,"column":9,"nodeType":"128","messageId":"129","endLine":42,"endColumn":16},{"ruleId":"126","severity":1,"message":"135","line":45,"column":5,"nodeType":"128","messageId":"129","endLine":45,"endColumn":20},{"ruleId":"126","severity":1,"message":"136","line":50,"column":5,"nodeType":"128","messageId":"129","endLine":50,"endColumn":23},{"ruleId":"126","severity":1,"message":"147","line":2,"column":10,"nodeType":"128","messageId":"129","endLine":2,"endColumn":16},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"@typescript-eslint/no-unused-vars","'useFetchSaldoTotal' is defined but never used.","Identifier","unusedVar","'errorMovimentos' is assigned a value but never used.","'isLoadingMovimentos' is assigned a value but never used.","'errorContas' is assigned a value but never used.","'headers' is assigned a value but never used.","'history' is assigned a value but never used.","'errorCategorias' is assigned a value but never used.","'errorSubcategorias' is assigned a value but never used.",["148"],["149"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'response'. Either include it or remove the dependency array. You can also do a functional update 'setResponse(r => ...)' if you only need 'response' in the 'setResponse' call.","ArrayExpression",["150"],["151"],"React Hook React.useEffect has a missing dependency: 'contas'. Either include it or remove the dependency array. You can also do a functional update 'setContas(c => ...)' if you only need 'contas' in the 'setContas' call.",["152"],"'yup' is defined but never used.","'string' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"153","fix":"155"},{"desc":"156","fix":"157"},"Update the dependencies array to be: [response]",{"range":"158","text":"159"},{"range":"160","text":"159"},"Update the dependencies array to be: [contas]",{"range":"161","text":"162"},[816,818],"[response]",[958,960],[1036,1038],"[contas]"]